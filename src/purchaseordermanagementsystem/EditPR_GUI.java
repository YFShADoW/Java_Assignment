/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package purchaseordermanagementsystem;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author weily
 */
public class EditPR_GUI extends javax.swing.JFrame {

    private SaleManager saleManager;
    private PurchaseRequisition PR;
    
    public EditPR_GUI(SaleManager saleManager, PurchaseRequisition PR) {
        this.saleManager=saleManager;
        this.PR = PR;
        initComponents();
        setLocationRelativeTo(null);
        supplierText.setText(PR.getSupplier().getSupplierID());
        PRIDText.setText(PR.getPurchaseRequisitionID());
        requestDateText.setText(PR.getRequestDate());
        displayItemListTable();
        displaySupplierItemTable(PR.getSupplier().getSupplierID());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemListTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        supplierItemTable = new javax.swing.JTable();
        quantityText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        supplierText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        PRIDText = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DeleteLineButton = new javax.swing.JButton();
        addItemButton = new javax.swing.JButton();
        requestDateText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        itemListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemListTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(itemListTable);

        jLabel6.setText("Item List in This Purchase Requisition: ");

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        supplierItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Stock", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(supplierItemTable);

        quantityText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTextActionPerformed(evt);
            }
        });

        jLabel3.setText("Enter Item Quantity: ");

        jLabel5.setText("Select to Add Item from Supplier: ");

        supplierText.setEditable(false);
        supplierText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierTextActionPerformed(evt);
            }
        });

        jLabel4.setText("Supplier: ");

        jLabel7.setText("PR ID:");

        PRIDText.setEditable(false);
        PRIDText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PRIDTextActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Edit Purchase Requisition");

        DeleteLineButton.setText("Delete Line");
        DeleteLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteLineButtonActionPerformed(evt);
            }
        });

        addItemButton.setText("Add Item");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        requestDateText.setEditable(false);

        jLabel9.setText("Request Date: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PRIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(supplierText, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(DeleteLineButton)
                        .addGap(115, 115, 115)
                        .addComponent(saveButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(quantityText, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requestDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(requestDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(backButton)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(PRIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(supplierText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DeleteLineButton)
                            .addComponent(saveButton))
                        .addContainerGap(17, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editButton)
                            .addComponent(addItemButton))
                        .addGap(37, 37, 37))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // Get table data
        if(itemListTable.getRowCount()>0){
            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            ItemLine[] itemList = new ItemLine[itemListTable.getRowCount()];
            for(int i=0; i< itemListTable.getRowCount();i++){
                String ItemID = model.getValueAt(i, 0).toString();
                Item item = saleManager.checkItemInfo(ItemID);
                String itemQuantity = model.getValueAt(i, 2).toString();
                ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
                itemList[i]=itemLine;
            }
            double grandTotalPrice = ItemLine.calculateGrandTotalPrice(itemList);

            PurchaseRequisition newPR = new PurchaseRequisition(PR.getPurchaseRequisitionID(),PR.getSaleManager(),PR.getSupplier(),PR.getRequestDate(),grandTotalPrice,PR.getPurchaseRequisitionStatus(),itemList);
            PR.editPurchaseRequisition(newPR);

            ManagePR_GUI managePRGUI = new ManagePR_GUI(saleManager);
            managePRGUI.show();
            dispose();
        }
        else{
            JOptionPane.showMessageDialog(null, "Edit item list cannot be empty");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void quantityTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTextActionPerformed

    private void supplierTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_supplierTextActionPerformed

    private void PRIDTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PRIDTextActionPerformed
        
    }//GEN-LAST:event_PRIDTextActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        ManagePR_GUI managePRGUI = new ManagePR_GUI(saleManager);
        managePRGUI.show();
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void DeleteLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteLineButtonActionPerformed
        if(itemListTable.getSelectedRow()!=-1){
            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            int selectedRowIndex = itemListTable.getSelectedRow();
            String SelectedItemID = model.getValueAt(selectedRowIndex, 0).toString();
            ItemLine[] itemList = new ItemLine[itemListTable.getRowCount()];

            // Get table Data
            for(int i=0; i< itemListTable.getRowCount();i++){
                String ItemID = model.getValueAt(i, 0).toString();
                Item item = saleManager.checkItemInfo(ItemID);
                String itemQuantity = model.getValueAt(i, 2).toString();
                ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
                itemList[i]=itemLine;
            }
            // Remove from the itemListTable
            removeItemListTableRow();
            for(ItemLine itemData:itemList){
                if(!itemData.getItem().getItemCode().equals(SelectedItemID)){
                    String[] tableRow = itemData.toString().split("\\|");
                    model.addRow(tableRow);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select and Remove");
        }
    }//GEN-LAST:event_DeleteLineButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        if(!quantityText.getText().isBlank()){
            DefaultTableModel SITmodel = (DefaultTableModel) supplierItemTable.getModel();
            String SelectedItemID = SITmodel.getValueAt(supplierItemTable.getSelectedRow(), 0).toString();// GUI input
            Item selectedItem = saleManager.checkItemInfo(SelectedItemID); // check database
            int itemQuantity = Integer.parseInt(quantityText.getText()); //GUI input

            if(checkDuplicate(SelectedItemID)){
                JOptionPane.showMessageDialog(null, "Item already add");
            }
            else{
                ItemLine itemLine =  new ItemLine(itemQuantity,selectedItem);
                String[] itemRow = itemLine.toString().split("\\|"); // converter& calculation

                DefaultTableModel ILTmodel = (DefaultTableModel) itemListTable.getModel();//GUI control
                ILTmodel.addRow(itemRow); // GUI output    
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Enter Quantity");
        }
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if(itemListTable.getSelectedRow()!=-1){
            if(!quantityText.getText().isBlank()){
                String newQuantity  = quantityText.getText();

                DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
                int selectedRowIndex = itemListTable.getSelectedRow();
                String SelectedItemID = model.getValueAt(selectedRowIndex, 0).toString();
                ItemLine[] itemList = new ItemLine[itemListTable.getRowCount()];

                // Get table Data & edit
                for(int i=0; i< itemListTable.getRowCount();i++){
                    String ItemID = model.getValueAt(i, 0).toString();
                    Item item = saleManager.checkItemInfo(ItemID);
                    String itemQuantity = model.getValueAt(i, 2).toString();
                    if(item.getItemCode().equals(SelectedItemID)){
                        itemQuantity = newQuantity;
                    }
                    ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
                    itemList[i]=itemLine;
                }

                // Remove from the itemListTable
                removeItemListTableRow();
                for(ItemLine itemData:itemList){
                    String[] tableRow = itemData.toString().split("\\|");
                    model.addRow(tableRow);
                }
        
            }
            else{
                JOptionPane.showMessageDialog(null, "Enter valid Quantity");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select item to edit");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void itemListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemListTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        int selectedRowIndex = itemListTable.getSelectedRow();
        String SelectedQuantity = model.getValueAt(selectedRowIndex, 2).toString();
        
        quantityText.setText(SelectedQuantity);
    }//GEN-LAST:event_itemListTableMouseClicked

    // custom code
    private boolean checkDuplicate(String itemIDTarget){
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        ItemLine[] itemList = new ItemLine[itemListTable.getRowCount()];
            
        // Get table Data
        for(int i=0; i< itemListTable.getRowCount();i++){
            String ItemID = model.getValueAt(i, 0).toString();
            Item item = saleManager.checkItemInfo(ItemID);
            String itemQuantity = model.getValueAt(i, 2).toString();
            ItemLine itemLine = new ItemLine(Integer.parseInt(itemQuantity),item);
            itemList[i]=itemLine;
        }
        
        for(ItemLine item:itemList){
            if(item.getItem().getItemCode().equals(itemIDTarget)){
                return true;
            }
        }
        return false;
    }
    public void displayItemListTable(){
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        ItemLine[] itemList = PR.getItemList();
        for(ItemLine itemData:itemList){
            String[] tableRow = itemData.toString().split("\\|");
            model.addRow(tableRow);
        }
    }
    
    public void displaySupplierItemTable(String SupplierID){
        DefaultTableModel model = (DefaultTableModel) supplierItemTable.getModel();
        FileManager file = new FileManager("Item.txt");
        ArrayList<String[]> rows =  file.filterData(5, SupplierID);
        removeSupplierListTableRow();
        for(int i =0;i<rows.size();i++){
            String[] selectedData = Arrays.copyOf(rows.get(i), 5);
            model.addRow(selectedData);
        }
    }
    public void removeSupplierListTableRow(){
        DefaultTableModel model = (DefaultTableModel) supplierItemTable.getModel();
        int count = model.getRowCount();
        for (int i = count - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    
    public void removeItemListTableRow(){
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        int count = model.getRowCount();
        for (int i = count - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }  
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditPR_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new EditPR_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteLineButton;
    private javax.swing.JTextField PRIDText;
    private javax.swing.JButton addItemButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTable itemListTable;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField quantityText;
    private javax.swing.JTextField requestDateText;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable supplierItemTable;
    private javax.swing.JTextField supplierText;
    // End of variables declaration//GEN-END:variables
}
